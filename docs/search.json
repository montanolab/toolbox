[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Toolbox",
    "section": "",
    "text": "Our research uses big data, computational techniques and macroecological techniques, but also generates new data through field work and documents relevant observations of natural history. As such, good data and code practices that enable collaboration and reproducibility are a strong priority.\nSince many of these practices involve very steep learning curves, it will take sustained practice to get familiar with them and develop expertise. However, the payoff for these practices compounds over time, much like a return on investment, and will become invaluable assets in one’s research toolkit. It is important to not feel discouraged if you feel lost in the early days!\nThis page therefore serves as a guide to frequently return to, whether it is to set up your software from scratch, or to clarify some critical point you have forgotten, or even to try and troubleshoot issues with your own computation or setup.\nAs of 2025, lab members primarily use the R programming language for most steps of the data analysis pipeline, only using spreadsheets to enter and clean up data. GIS tasks are performed in either ArcGIS (proprietary) or QGIS (FOSS1). Manuscript writing is usually done in conventional word processing software like MS Word (or FOSS alternatives like LibreOffice Writer) or GDocs, although Quarto/R Markdown is a promising alternative with several benefits2. Other software used less frequently include Raven Pro and Praat for audio analysis, BORIS for behaviour data, MARK, Distance and BEAST.\nMost of these tools, especially those living in the FOSS universe, have tons of resources available online, including instructive videos on YouTube. These are incredibly useful to get a better sense of what each of these does and how to use them. You will find links to a few such resources in the respective sections."
  },
  {
    "objectID": "index.html#sec-rstudio-proj",
    "href": "index.html#sec-rstudio-proj",
    "title": "Toolbox",
    "section": "RStudio and project-oriented workflows",
    "text": "RStudio and project-oriented workflows\nTypically, you end up working on multiple “things” over the course of a day, week or month. These can be individual research projects, coursework and assignments, and more. Each of these also likely involves working with multiple files, which usually means using file paths to reference them. Absolute file paths3 are the biggest enemy of shareability of your code, and more broadly its reproducibility. Not having all the files required for your project organized in a single directory is a close second.\n3 Another phrase you will find repeatedly here. See this brief exposition of absolute vs relative file paths.In a research lab setting, where analyses often span months or years and involve multiple contributors, project-oriented workflows ensure that data, code, outputs, and documentation remain organized and interconnected. Such a workflow, centered around a self-contained project folder with consistent structure, promotes reproducibility, collaboration, and long-term clarity.\nLuckily for R users, RStudio offers several useful features that let you use relative file paths, manage dependencies and isolate environments—reducing the risk of your code breaking when files are moved or shared, and making it easy for collaborators or future lab members to pick up and understand past work. RStudio fully supports project-based workflows; in fact, this work style is so important that RStudio has an official concept of R Projects. R Projects make it easy to switch from one project4 to another, have many projects open at once, re-launch recently used ones, etc., and also enables you to start thinking about projects as modular and self-contained. It is strongly recommended to use R Projects in your daily workflow.\n4 Note that this lowercase “project” is more conceptual, referring to individual pieces of work, which can range from research projects and websites to software packages and slide decks. They key is to define your projects such that they are self-contained.A quote from the opinionated Tidyverse blog post linked above:\n\nIt’s like agreeing that we will all drive on the left or the right. A hallmark of civilization is following conventions that constrain your behavior a little, in the name of public safety.\n\nFor another insightful read going into detail about the philosophy of project-oriented workflows (with intriguing questions such as “what is the source of truth” and “where does your analysis live”), please read this chapter from R for Data Science by Hadley Wickham, Mine Çetinkaya-Rundel, and Garrett Grolemund 5. This Data Carpentry unit on project management with RStudio is also instructive and useful.\n5 A freely available textbook, and the Sacred Text for R programmers.\n\n\n\n\n\nIf you have been using commands such as setwd(\"C:\\Users\\karthik\\path\\that\\only\\I\\have\") and rm(list = ls()), shifting to a project-oriented workflow as recommended above will mean forsaking these commands (which is a good thing). In addition, there are some other strong recommendations for working in RStudio, such as disabling the Restore .RData into workspace at startup option and changing the Save workspace to .RData on exit: option to “Never”. This ensures that each new R session starts with a blank slate, helping you catch errors more easily and enabling better reproducibility."
  },
  {
    "objectID": "index.html#other-resources-for-r",
    "href": "index.html#other-resources-for-r",
    "title": "Toolbox",
    "section": "Other resources for R",
    "text": "Other resources for R\nHadley’s textbook mentioned above is, in many cases, the only resource you need given how comprehensive and user-friendly it is. However, for specific issues, questions or troubleshooting problems, it is worth searching on StackExchange6 portals like StackOverflow (coding-related) and CrossValidated (statistics-related). Additionally, you can also find nice specific tutorials on YouTube.\n6 StackExchange is a network of individual websites. Read more here.Another strong recommendation for R programmers is tidyverse, which is a collection of opinionated R packages for working with data. “Opinionated” here means that all the member packages share an underlying design philosophy, grammar, and data structures—which ultimately make coding in R not only more intuitive, clean and stress-free, but also more enjoyable!"
  },
  {
    "objectID": "index.html#making-an-account-on-github",
    "href": "index.html#making-an-account-on-github",
    "title": "Toolbox",
    "section": "Making an account on GitHub",
    "text": "Making an account on GitHub\nGet set up with GitHub:\n\nCreate a GitHub account using the instructions here, if you don’t have one already.\nShare your GitHub username with Flavia, so she can add you to the lab’s GitHub page which houses repositories of our research projects as well as other useful resources.\nFor further reading about what you can do with your GitHub account, see this documentation."
  },
  {
    "objectID": "index.html#sec-gh-auth",
    "href": "index.html#sec-gh-auth",
    "title": "Toolbox",
    "section": "Connecting your system to your GitHub account",
    "text": "Connecting your system to your GitHub account\nBecause Git lives locally and GitHub is cloud-based (also called “remote” in Git lingo), you will need to authenticate the connection between the two. There are two methods of authentication, HTTPS and SSH. HTTPS is the recommended option and also allows the use of credential helpers so you do not need to authenticate every time you make a change.7\n7 Read more about remote repositories and HTTPS vs SSH here.There are two general methods to cache your GitHub credentials in Git: either using the command line interface or a special credential manager software (read more here). However, for those of us who use R, there is an even easier method! The required code is given below and can be copied into your R session. See detailed instructions here.\n\nInstall the R package usethis (which automatically also installs the dependency gitcreds)\nGet a personal access token (PAT): if you are signed in to GitHub, create_github_token() will take you to a pre-filled form to generate a PAT. It is recommended to give descriptive names for each token in the “Note” field, such as the computer or project it is for (e.g., “karthik-laptop” or “karthik-montano-lab-server”). Once generated, make sure to copy it to clipboard before closing the page. You can paste it in a temporary file if you cannot immediately proceed to the next step.\nCache your PAT locally: when you run gitcreds_set() you will be prompted to enter your PAT, so just paste the copied token.\n\n# install packages\ninstall.packages(\"usethis\")\n\n# get PAT\nusethis::create_github_token()\n\n# cache PAT\ngitcreds::gitcreds_set()"
  },
  {
    "objectID": "index.html#cloning-a-repository-in-rstudio",
    "href": "index.html#cloning-a-repository-in-rstudio",
    "title": "Toolbox",
    "section": "Cloning a repository (in RStudio)",
    "text": "Cloning a repository (in RStudio)\nOne of the biggest advantages to using Git and GitHub is how easy it becomes to share and collaborate on projects. The fundamental step to get familiarised with here is cloning a GitHub repository.\nBy now, you have a basic idea about project-oriented workflows (Section 2.1) and Git repositories (Section 3). Cloning a GitHub repository is essentially creating a local copy of the project using the latest version available on the “remote”. You will recall the two methods of authenticating the Git-GitHub connection (Section 3.2); depending on which one you chose for your GitHub account authentication, select the appropriate URL to clone the repo.\n\nGo to the repository you want to clone, e.g., https://github.com/montanolab/toolbox\nClick on the green button saying &lt;&gt; Code\nSelect between HTTPS and SSH options (depending on how you have authenticated your GitHub account) and copy the URL to clipboard\nOpen RStudio\nFile (in top-left) or R Project icon (in top-right) –&gt; New Project –&gt; Version Control –&gt; Git\nIn the “Repository URL” field, paste the copied URL. “Project directory name” will autofill with the repo name8. For “Create project as subdirectory of”, browse and select the higher-order folder under which you want this new folder to be created.\nClick on “Create Project”\n\n8 It is recommended to not change this, so that it’s easier to associate the local repo with the remote.This method is also recommended when starting a new project repo from scratch. That is, first create a new repo on GitHub, then clone it locally which also creates a new R Project in the process."
  },
  {
    "objectID": "index.html#commits-pushes-and-pulls",
    "href": "index.html#commits-pushes-and-pulls",
    "title": "Toolbox",
    "section": "Commits, pushes and pulls",
    "text": "Commits, pushes and pulls\nOnce you have the necessary software and credentials set up, actually implementing Git in your workflow involves these three fundamental actions: committing, pushing and pulling.\n\n\n\nIllustration from Openscapes blog post on GitHub\n\n\nA commit is best thought of as a higher-order method of saving a file. Similar to saving a file that’s been edited, a commit records changes to one or more files (which may or may not be text-based) in your directory. You can save small sets of meaningful changes to your files as commits, and also give each commit a meaningful and descriptive message describing the change(s).\n\n\n\nIllustration from Openscapes blog post on GitHub\n\n\nCommits are a series of check-ins with your local all-seeing eye. Eventually, say at the end of one continuous work session, you will want to update your GitHub repo (i.e., the remote) with all these changes. For this, you need to “push” the commits up to the remote. On the other hand, if there are updates on the remote (e.g., your collaborator has added an analysis), you will want to retrieve those locally, for which you need to “pull” changes from the remote. It is good practice to always pull before starting a new work session, to ensure you are working on the latest version and to prevent “conflicts” later.\nOnce again, repeated practice is required to get comfortable with this workflow. Read more about commits here."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "This site was developed by Karthik Thrikkadeeri and Flavia Montaño-Centellas. Thanks to ___ for useful suggestions and feedback.\nThe site was last updated on 04 August 2025.\n\nAcknowledgements\nThis documentation was created using inspiration and tips from various sources, some of which are listed below (others are location-specific links on other pages).\n\nWebsite of GK Lab at LSU (website)\nWebsite of Li Lab at University of Arizona (website)\nZenodo Repository of Nature Conservation Foundation (link)\nCourse webpage for Reproducible research in ecology and evolution (BIOL 4800/7800 at LSU) by Gaurav Kandlikar"
  }
]